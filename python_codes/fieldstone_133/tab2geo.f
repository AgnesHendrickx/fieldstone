program tab2geo

implicit none

integer, parameter :: nPoints = 8192
integer, parameter :: nOuterFaces = 16380



double precision   :: pointCoords(3,nPoints)
integer            :: connectivity(3,nOuterFaces)
character(len=1)   :: dummyChar

integer, allocatable :: lineLookup(:,:)
integer, allocatable :: lineLookup2(:,:)


integer            :: fromPoint, toPoint
integer            :: nLines
integer            :: lineID
integer            :: from, to
integer            :: iRecord, iLine, iTriangle

integer            :: p1, p2, p3, l1, l2, l3

!****************************************************************
! read tab format file. Store the points in pointCoords and
! the outside faces in connectivity
!****************************************************************

open(unit=42, file="1620geographos.tab")

do iRecord = 1 , nPoints
	read(42,*) dummyChar, pointCoords(:, iRecord)
enddo
do iRecord = 1 , nOuterFaces
        read(42,*) dummyChar, connectivity(:, iRecord)
enddo

close(42)

!****************************************************************
! Work through the element hierarchy to write the geo format
!****************************************************************

open(unit=43, file="1620geographos.geo")

!---------------------
! 0 the header, containing resolution information
!---------------------

write(43,*) "// generated by tab2geo"
write(43,*) "elemSize = 1;"

!---------------------
! 1 Points
!---------------------

do iRecord = 1 , nPoints
    write(43,*) "Point(", iRecord, ")={", pointCoords(1, iRecord), &
                                     ",", pointCoords(2, iRecord), &
                                     ",", pointCoords(3, iRecord), &
                                     ", elemSize};"
enddo

!---------------------
! 2 Lines
!---------------------


! All the lines will point from the lowest numbered vertex
! to the highest numbered vertex. This will be numbered in the
! lookup table, on position (from, to).
! The mirrored position will refer to the same line but with a minus sign.
! This is not a memory efficient way, but on this scale it
! will work well enough.
allocate(LineLookup(nPoints, nPoints))

lineID = 0
do iRecord = 1 , nOuterFaces

	do iLine = 1,3

		from = connectivity(iLine,iRecord)
		to   = connectivity(mod(iLine,3)+1,iRecord)

		if (from .lt. to) then
			! we found an unknown line!
			lineID = lineID + 1
			LineLookup(from, to) = lineID
			! add reverse line
			LineLookup(to, from) = -lineID
		endif

	enddo
enddo

nLines = lineID

allocate(LineLookup2(2, nLines))

! now can walk through the lookup matrix and create a list containing just the lines...
do fromPoint = 1,nPoints-1
	do toPoint = fromPoint, nPoints
		LineID = LineLookup(fromPoint, toPoint)
		if (LineID .ne. 0) then
			LineLookup2(1, LineID) = fromPoint
            LineLookup2(2, LineID) = toPoint
		else
			! we are on a place in the matrix with two points
			! that are not connected on the asteroid surface.
		endif
	enddo
enddo

! ... which we can write to file

do iLine = 1,nLines
    write(43,*) "Line(", iLine, ")={", LineLookup2(1, iLine), &
                                  ",", LineLookup2(2, iLine), "};"
enddo


!---------------------
! 3 Line loops
!---------------------

do iTriangle = 1, nOuterFaces
	p1 = connectivity(1, iTriangle)
    p2 = connectivity(2, iTriangle)
    p3 = connectivity(3, iTriangle)

	l1 = LineLookup(p1, p2)
    l2 = LineLookup(p2, p3)
    l3 = LineLookup(p3, p1)

    write(43,*) "Line Loop(", iTriangle, ")={", l1, ",", l2, ",", l3, "};"

enddo

!---------------------
! 4 Plane surfaces (same index as the line loops)
!---------------------

do iTriangle = 1, nOuterFaces
    write(43,*) "Plane Surface(", iTriangle, ")={", iTriangle, "};"
enddo

!---------------------
! 5 Physical surfaces (again, same index as the line loops)
!---------------------

do iTriangle = 1, nOuterFaces
    write(43,*) "Physical Surface(", iTriangle, ")={", iTriangle, "};"
enddo

!---------------------
! 6 Surface loop. (looping over aaaaaalllll the surfaces)
!---------------------

write(43,*) "Surface Loop(1) = {"
do iTriangle = 1, nOuterFaces-1
    write(43,*) iTriangle, ", "
enddo
write(43,*) nOuterFaces, "};"

!---------------------
! 7 Volume
!---------------------

write(43,*) "Volume(1) = {1};"

!---------------------
! 7 Physical Volume
!---------------------

write(43,*) "Physical Volume(1) = {1};"




close(43)

end program
